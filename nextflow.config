/*
 * -------------------------------------------------
 *  nf-core/methylseq Nextflow config file
 * -------------------------------------------------
 * Default config options for all environments.
 * Cluster-specific config options should be saved
 * in the conf folder and imported under a profile
 * name here.
 */


// Configurable variables/defaults
params {
  // defaults. best not changed
  container = "nfcore/vipr:latest" // Container slug. Stable releases should specify release tag!
  outdir = 'results'
  // Pipeline options
  skip_kraken = false
  ref_fasta = ''
  cont_fasta = ''
  readPaths = null// injection for debugging as in e.g. rnaseq nf-core
  reads = null
  // nf-core warnings
  //params.singleEnd

 // Boilerplate options
  name = false
  multiqc_config = "$baseDir/conf/multiqc_config.yaml"
  email = false
  plaintext_email = false
  help = false
  tracedir = "${params.outdir}/pipeline_info"
  clusterOptions = false
  awsqueue = false
  awsregion = 'eu-west-1'
  custom_config_version = 'master'
}


profiles {
  standard {
    includeConfig 'conf/base.config'
  }
  conda { process.conda = "$baseDir/environment.yml" }
  docker {
    docker.enabled = true
    process.container = params.container
  }
  singularity {
    singularity.enabled = true
    process.container = {"shub://${params.container.replace('nfcore', 'nf-core')}"}
  }
  awsbatch {
    includeConfig 'conf/base.config'
    includeConfig 'conf/awsbatch.config'
  }
  gis {
    includeConfig 'conf/base.config'
    includeConfig 'conf/gis.config'
  }
  test {
    includeConfig 'conf/test.config'
  }
  none {
    // Don't load any config (for use with custom home configs)
  }
}


// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

timeline {
  enabled = true
  file = "${params.tracedir}/pipeline_info/nfcore-vipr_timeline.html"
}
report {
  enabled = true
  file = "${params.tracedir}/pipeline_info/nfcore-vipr_report.html"
}
trace {
  enabled = true
  file = "${params.tracedir}/pipeline_info/nfcore-vipr_trace.txt"
}
dag {
  enabled = true
  file = "${params.tracedir}/pipeline_info/nfcore-vipr_DAG.svg"
}


manifest {
  name = 'nf-core/vipr'
  description = 'Viral amplicon/enrichment analysis and intrahost variant calling pipeline, part of the nf-core community.'
  homePage = 'https://github.com/nf-core/vipr'
  author = 'Andreas Wilm'
  // TODO: Define only here if/when we can. See https://github.com/nextflow-io/nextflow/issues/840
  mainScript = 'main.nf'
  nextflowVersion = '>=18.10.1'
  version = 'latest'
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if(type == 'memory'){
    try {
      if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'time'){
    try {
      if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'cpus'){
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
